// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(PeerAssessmentSystemDbContext))]
    [Migration("20241108214402_AddStudentEvaluation")]
    partial class AddStudentEvaluation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Infrastructure.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Infrastructure.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentID")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Infrastructure.Models.StudentEvaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EvaluatedId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EvaluatorId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatedId");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("TeamId");

                    b.ToTable("StudentEvaluation");
                });

            modelBuilder.Entity("Infrastructure.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Infrastructure.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Infrastructure.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StudentTeam", b =>
                {
                    b.Property<Guid>("StudentsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeamsId")
                        .HasColumnType("TEXT");

                    b.HasKey("StudentsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("StudentTeam");
                });

            modelBuilder.Entity("Infrastructure.Models.Group", b =>
                {
                    b.HasOne("Infrastructure.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Infrastructure.Models.Student", b =>
                {
                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithOne("student")
                        .HasForeignKey("Infrastructure.Models.Student", "UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.StudentEvaluation", b =>
                {
                    b.HasOne("Infrastructure.Models.Student", "Evaluated")
                        .WithMany("EvaluationsRecived")
                        .HasForeignKey("EvaluatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Student", "Evaluator")
                        .WithMany("EvaluationsGiven")
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Team", "Team")
                        .WithMany("StudentEvaluations")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluated");

                    b.Navigation("Evaluator");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Infrastructure.Models.Teacher", b =>
                {
                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithOne("teacher")
                        .HasForeignKey("Infrastructure.Models.Teacher", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.Team", b =>
                {
                    b.HasOne("Infrastructure.Models.Group", "Group")
                        .WithMany("Teams")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("StudentTeam", b =>
                {
                    b.HasOne("Infrastructure.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.Group", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Infrastructure.Models.Student", b =>
                {
                    b.Navigation("EvaluationsGiven");

                    b.Navigation("EvaluationsRecived");
                });

            modelBuilder.Entity("Infrastructure.Models.Team", b =>
                {
                    b.Navigation("StudentEvaluations");
                });

            modelBuilder.Entity("Infrastructure.Models.User", b =>
                {
                    b.Navigation("student");

                    b.Navigation("teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
